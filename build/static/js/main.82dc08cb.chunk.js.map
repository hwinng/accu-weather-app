{"version":3,"sources":["service/forcast.api.js","service/location.api.js","components/dropdown/CityDropdown.jsx","components/forcast/SingleDayWeatherForcast.jsx","utils/index.js","components/forcast/WeeklyWeatherForcast.jsx","assets/img/avatar2.png","components/about-me/index.jsx","environment/environment.local.js","App.js","reportWebVitals.js","index.js"],"names":["getForcast","apiKey","value","a","url","axios","get","res","console","log","getCurrentLocation","tracedIP","toSplitStr","data","replace","subStr","substring","indexOf","ipAddress","locationKey","Key","locationName","EnglishName","parentCity","ParentCity","country","Country","timezone","TimeZone","getTopCities","locations","location","push","label","AdministrativeArea","code","CityDropdown","handleOnChange","className","classNamePrefix","placeholder","isSearchable","name","options","onChange","selectedOption","SingleDayWeatherForcast","selectedDay","dayIndex","dayDate","dayIcon","dayMinTemp","dayMaxTemp","handleDaySelection","onClick","format","src","alt","fahrenheitToCelcius","fahren","Number","WeeklyWeatherForcast","weatherData","selectedCity","Date","Day","Icon","style","display","marginBottom","IconPhrase","marginTop","map","day","index","Temperature","Maximum","Value","toFixed","Minimum","EpochDate","Aboutme","iconStyles","color","fontSize","marginRight","href","rel","target","Avatar","width","height","fontStyle","environment","App","useState","setSelectedCity","setSelectedDay","setLocations","weatherForcast","setWeatherForcast","useEffect","cities","currentLocation","weeklyForcast","document","title","fetchInitialData","handleSelectChange","fiveDayForcast","DailyForecasts","textAlign","marginLeft","paddingTop","fontFamily","length","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.82dc08cb.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const getForcast = async (apiKey, value) => {\n    const url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${value}?apikey=${apiKey}&details=true`;\n    try {\n        const res = await axios.get(url);\n        return res;\n    } catch (error) {\n        console.log('get forcast failed', error);\n    }\n}","import axios from 'axios';\n\n/**\n *\n * @param {*} apiKey \n * @returns an object that holds information of user's location\n */\nexport const getCurrentLocation = async (apiKey) => {\n    const tracedIP = await axios.get('https://www.cloudflare.com/cdn-cgi/trace');\n    const toSplitStr = tracedIP.data.replace(/(\\r\\n|\\n|\\r)/gm, \",\");\n    const subStr = toSplitStr.substring(toSplitStr.indexOf('ip'));\n\n    const ipAddress = subStr.substring(3, subStr.indexOf(','))\n    \n    const url = `http://dataservice.accuweather.com/locations/v1/cities/ipaddress?apikey=${apiKey}&q=${ipAddress}`;\n    try {\n        const res = await axios.get(url);\n        return {\n            locationKey: res.data.Key,\n            locationName: res.data.EnglishName,\n            parentCity: res.data.ParentCity,\n            country: res.data.Country,\n            timezone: res.data.TimeZone\n        }\n    } catch (error) {\n        console.log('get current location failed', error);\n    }\n}\n\n/**\n * \n * @param {*} apiKey \n * @returns return an array of 150 top cities in the world\n */\nexport const getTopCities = async(apiKey) => {\n    const url = `http://dataservice.accuweather.com/locations/v1/topcities/150?apikey=${apiKey}`;\n    try {\n        const res = await axios.get(url);\n        const locations = [];\n        for (let location of res.data) {\n            locations.push({\n                label: location.AdministrativeArea.EnglishName,\n                value: location.Country.EnglishName,\n                code: location.Key\n            });\n        }\n        return locations;\n    } catch (error) {\n        console.log('get top cities failed', error);\n    }\n}\n","import React from 'react';\nimport Select from 'react-select';\n\nexport const CityDropdown = ({\n    locations,\n    handleOnChange\n}) => {\n    return (\n        <div className=\"search-bar\">\n            <Select\n                classNamePrefix=\"select\"\n                placeholder=\"Search a city...\"\n                isSearchable=\"true\"\n                name=\"cities\"\n                options={locations}\n                onChange={selectedOption =>\n                    handleOnChange(selectedOption.label, selectedOption.code)\n                }\n            />\n      </div>\n    )\n}\n","import React from \"react\";\nimport Moment from \"react-moment\";\n\nexport const SingleDayWeatherForcast = ({\n  selectedDay,\n  dayIndex,\n  dayDate,\n  dayIcon,\n  dayMinTemp,\n  dayMaxTemp,\n  handleDaySelection\n}) => {\n  return (\n    <div\n      className={`single-day ${selectedDay === dayIndex ? \"selected\" : \"\"}`}\n      onClick={handleDaySelection}\n    >\n      <div className=\"flex-row bd-highlight m-2 \">\n        <h6>\n          <Moment format=\"ddd\">{dayDate}</Moment>\n        </h6>\n        <img\n          className=\"small-image\"\n          src={`https://developer.accuweather.com/sites/default/files/${\n            dayIcon >= 10 ? dayIcon : \"0\" + dayIcon\n          }-s.png`}\n          alt=\"weather-icon\"\n        />\n        <h6>{`${dayMaxTemp}°C`}</h6>\n        <h6>{`${dayMinTemp}°C`}</h6>\n      </div>\n    </div>\n  );\n};","export const fahrenheitToCelcius = (fahren) => {\n    return (Number(fahren)-32)*5/9\n}","import React from \"react\";\nimport { SingleDayWeatherForcast } from \"./SingleDayWeatherForcast\";\nimport Moment from \"react-moment\";\nimport { fahrenheitToCelcius } from '../../utils'\n\nexport const WeeklyWeatherForcast = ({\n  weatherData,\n  selectedCity,\n  selectedDay,\n  handleDaySelection\n}) => {\n    return (\n        <div className=\"container gray text-white\">\n            {weatherData[0] \n                ? (\n                    <div className=\"d-flex p-2 bd-highlight justify-content-center top-weather\">\n                    <div className=\"flex-row bd-highlight\">\n                        <h4>{selectedCity}</h4>\n                        <Moment format=\"dddd\">{weatherData[selectedDay].Date}</Moment>\n                        <Moment className=\"d-block\" format=\"DD/MM/YYYY\">{weatherData[selectedDay].Date}</Moment>\n\n                        <div className=\"flex-row bd-highlight\">\n                            <img\n                                src={`https://developer.accuweather.com/sites/default/files/${\n                                weatherData[selectedDay].Day.Icon >= 10\n                                    ? weatherData[selectedDay].Day.Icon\n                                    : \"0\" + weatherData[selectedDay].Day.Icon\n                                }-s.png`}\n                                alt=\"weather-icon\"\n                            />\n                            <span style={{display: 'block', marginBottom: '1rem'}}>{weatherData[selectedDay].Day.IconPhrase}</span>\n                        </div>\n                    </div>\n                    </div>\n                ) \n                : null\n            }\n\n            <div className=\"d-flex p-2 bd-highlight justify-content-center bottom-weather\" style={{marginTop: '5rem'}}>\n                {weatherData.map((day, index) => (\n                    <SingleDayWeatherForcast\n                        selectedDay={selectedDay}\n                        dayIndex={index}\n                        key={day.EpochDate}\n                        dayDate={day.Date}\n                        dayIcon={day.Day.Icon}\n                        dayMaxTemp={fahrenheitToCelcius(day.Temperature.Maximum.Value).toFixed(1)}\n                        dayMinTemp={fahrenheitToCelcius(day.Temperature.Minimum.Value).toFixed(1)}\n                        handleDaySelection={() => handleDaySelection(index)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n","export default __webpack_public_path__ + \"static/media/avatar2.4dfa54a1.png\";","import React from 'react'\nimport Avatar from '../../assets/img/avatar2.png'\nimport { AiFillGithub, AiFillFacebook, AiFillInstagram } from 'react-icons/ai'\n\nconst Aboutme = () => {\n    let iconStyles = { color: \"grey\", fontSize: \"2rem\", marginRight: \"1rem\" };\n    return (\n        <div className=\"about\">\n            <section className=\"about__intro\">\n                <a href=\"https://github.com/hwinng\" rel=\"noreferrer\" target=\"_blank\">\n                    <img className=\"about__intro___avatar\" src={Avatar} alt=\"avatar\" width=\"128\" height=\"128\" />\n                </a>\n                <div><span>Phillip Nguyen</span></div>\n                <div className=\"about__intro___text\">\n                    <p>Hi! My name is Nguyen Van Huyen, just call me as Phillip. I am currently studying at Hanoi University as third-year student. I architect and build client-side applications with Angular, React, and TypeScript.</p>\n                </div>\n            </section>\n\n            <section className=\"about__media\">\n                <a href=\"https://github.com/hwinng\" rel=\"noreferrer\" target=\"_blank\"><AiFillGithub className=\"icon\" style={iconStyles} /></a>\n                <a href=\"https://www.facebook.com/moc.huyenn.3/\" rel=\"noreferrer\" target=\"_blank\"><AiFillFacebook className=\"icon\" style={iconStyles} /></a>\n                <a href=\"https://www.instagram.com/?hl=en\" rel=\"noreferrer\" target=\"_blank\"><AiFillInstagram className=\"icon\" style={iconStyles} /></a>\n            </section>\n\n            <section className=\"about__footer\">\n                <div>\n                    <p style={{fontStyle: 'italic'}}>Made with love from Hanu.</p>\n                </div>\n            </section>\n        </div>\n    )\n}\n\nexport default Aboutme\n","export const environment = {\n    apiKey: '5uQvhf5uZZh4jvah6gmPw1sGGK3u3vIj',\n}","import './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport { useEffect, useState } from 'react';\nimport { getCurrentLocation, getTopCities, getForcast } from './service';\nimport { CityDropdown, WeeklyWeatherForcast } from './components';\nimport Aboutme from './components/about-me'\nimport { environment } from './environment/environment.local';\n\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState('Hanoi');\n  const [selectedDay, setSelectedDay] = useState('0');\n  const [locations, setLocations] = useState([]);\n  const [weatherForcast, setWeatherForcast] = useState([]);\n\n  useEffect(() => {\n    document.title = 'Hanu-IWS Weather';\n    async function fetchInitialData() {\n      const cities = await getTopCities(environment.apiKey);\n      const currentLocation = await getCurrentLocation(environment.apiKey);\n      setLocations(cities);\n\n      await weeklyForcast(environment.apiKey, currentLocation.parentCity.Key)\n    }\n    fetchInitialData();\n  }, [])\n\n  const handleSelectChange = async (label, code) => {\n    setSelectedCity(label);\n    await weeklyForcast(environment.apiKey, code);\n  }\n\n  const weeklyForcast = async (apiKey, value) => {\n    const res = await getForcast(apiKey, value);\n    const fiveDayForcast = res.data.DailyForecasts;\n    setWeatherForcast(fiveDayForcast);\n  }\n\n  const handleDaySelection = e => {\n    setSelectedDay(e);\n  }\n\n  return (\n    <div className=\"App\">\n        <section className=\"sider\">\n          <Aboutme />\n        </section>\n        <section className=\"weather-app\">\n          <h1 style={{textAlign: 'left', marginLeft: '2rem', paddingTop: '1rem', fontFamily: 'monospace'}}>Hanu Forcast</h1>\n          <CityDropdown\n            locations={locations}\n            handleOnChange={handleSelectChange}\n          />\n\n          {weatherForcast.length === 0 \n            ? null \n            : (\n                <WeeklyWeatherForcast\n                  handleDaySelection={handleDaySelection}\n                  selectedDay={selectedDay}\n                  selectedCity={selectedCity}\n                  weatherData={weatherForcast}\n                  locations={locations}\n                />\n              )\n          }\n        </section>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}