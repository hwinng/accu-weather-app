{"version":3,"sources":["service/forcast.api.js","service/location.api.js","components/dropdown/CityDropdown.jsx","components/forcast/SingleDayWeatherForcast.jsx","utils/index.js","components/forcast/WeeklyWeatherForcast.jsx","environment/environment.local.js","App.js","reportWebVitals.js","index.js"],"names":["getForcast","apiKey","value","a","url","axios","get","res","console","log","getCurrentLocation","ipAdrress","locationKey","data","Key","locationName","EnglishName","parentCity","ParentCity","country","Country","timezone","TimeZone","getTopCities","locations","location","push","label","AdministrativeArea","code","CityDropdown","handleOnChange","className","classNamePrefix","placeholder","isSearchable","name","options","onChange","selectedOption","SingleDayWeatherForcast","selectedDay","dayIndex","dayDate","dayIcon","dayMinTemp","dayMaxTemp","handleDaySelection","onClick","format","src","alt","fahrenheitToCelcius","fahren","Number","WeeklyWeatherForcast","weatherData","selectedCity","Date","Day","Icon","IconPhrase","style","marginTop","map","day","index","Temperature","Maximum","Value","toFixed","Minimum","EpochDate","environment","App","useState","setSelectedCity","setSelectedDay","setLocations","weatherForcast","setWeatherForcast","useEffect","cities","currentLocation","weeklyForcast","fetchInitialData","handleSelectChange","fiveDayForcast","DailyForecasts","textAlign","marginLeft","paddingTop","fontFamily","length","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAEaA,EAAU,uCAAG,WAAOC,EAAQC,GAAf,iBAAAC,EAAA,6DAChBC,EADgB,qEACoDF,EADpD,mBACoED,EADpE,mCAGAI,IAAMC,IAAIF,GAHV,cAGZG,EAHY,yBAIXA,GAJW,gCAMlBC,QAAQC,IAAI,qBAAZ,MANkB,yDAAH,wD,QCAVC,EAAkB,uCAAG,WAAOT,EAAQU,GAAf,iBAAAR,EAAA,6DACxBC,EADwB,kFACyDH,EADzD,cACqEU,GADrE,kBAGRN,IAAMC,IAAIF,GAHF,cAGpBG,EAHoB,yBAInB,CACHK,YAAaL,EAAIM,KAAKC,IACtBC,aAAcR,EAAIM,KAAKG,YACvBC,WAAYV,EAAIM,KAAKK,WACrBC,QAASZ,EAAIM,KAAKO,QAClBC,SAAUd,EAAIM,KAAKS,WATG,gCAY1Bd,QAAQC,IAAI,8BAAZ,MAZ0B,yDAAH,wDAgBlBc,EAAY,uCAAG,WAAMtB,GAAN,yBAAAE,EAAA,6DAClBC,EADkB,+EAC4DH,GAD5D,kBAGFI,IAAMC,IAAIF,GAHR,OAGdG,EAHc,OAIdiB,EAAY,GAJE,cAKCjB,EAAIM,MALL,IAKpB,2BAASY,EAAsB,QAC3BD,EAAUE,KAAK,CACXC,MAAOF,EAASG,mBAAmBZ,YACnCd,MAAOuB,EAASL,QAAQJ,YACxBa,KAAMJ,EAASX,MATH,uDAYbU,GAZa,kCAcpBhB,QAAQC,IAAI,wBAAZ,MAdoB,0DAAH,sD,eCfZqB,EAAe,SAAC,GAGtB,IAFHN,EAEE,EAFFA,UACAO,EACE,EADFA,eAEA,OACI,qBAAKC,UAAU,aAAf,SACI,cAAC,IAAD,CACIC,gBAAgB,SAChBC,YAAY,mBACZC,aAAa,OACbC,KAAK,SACLC,QAASb,EACTc,SAAU,SAAAC,GAAc,OACpBR,EAAeQ,EAAeZ,MAAOY,EAAeV,Y,gBCb3DW,EAA0B,SAAC,GAQjC,IAPLC,EAOI,EAPJA,YACAC,EAMI,EANJA,SACAC,EAKI,EALJA,QACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,WACAC,EACI,EADJA,mBAEA,OACE,qBACEf,UAAS,qBAAgBS,IAAgBC,EAAW,WAAa,IACjEM,QAASD,EAFX,SAIE,sBAAKf,UAAU,6BAAf,UACE,6BACE,cAAC,IAAD,CAAQiB,OAAO,MAAf,SAAsBN,MAExB,qBACEX,UAAU,cACVkB,IAAG,gEACDN,GAAW,GAAKA,EAAU,IAAMA,EAD/B,UAGHO,IAAI,iBAEN,uCAAQL,EAAR,WACA,uCAAQD,EAAR,iBC7BKO,EAAsB,SAACC,GAChC,OAA2B,GAAnBC,OAAOD,GAAQ,IAAM,GCIpBE,EAAuB,SAAC,GAK9B,IAJLC,EAII,EAJJA,YACAC,EAGI,EAHJA,aACAhB,EAEI,EAFJA,YACAM,EACI,EADJA,mBAEE,OACI,sBAAKf,UAAU,4BAAf,UACKwB,EAAY,GAEL,qBAAKxB,UAAU,6DAAf,SACA,sBAAKA,UAAU,wBAAf,UACI,6BAAKyB,IACL,cAAC,IAAD,CAAQR,OAAO,OAAf,SAAuBO,EAAYf,GAAaiB,OAEhD,sBAAK1B,UAAU,wBAAf,UACA,qBACIkB,IAAG,gEACHM,EAAYf,GAAakB,IAAIC,MAAQ,GAC/BJ,EAAYf,GAAakB,IAAIC,KAC7B,IAAMJ,EAAYf,GAAakB,IAAIC,KAHtC,UAKHT,IAAI,iBAER,4BAAIK,EAAYf,GAAakB,IAAIE,qBAKvC,KAGN,qBAAK7B,UAAU,gEAAgE8B,MAAO,CAACC,UAAW,QAAlG,SACKP,EAAYQ,KAAI,SAACC,EAAKC,GAAN,OACb,cAAC,EAAD,CACIzB,YAAaA,EACbC,SAAUwB,EAEVvB,QAASsB,EAAIP,KACbd,QAASqB,EAAIN,IAAIC,KACjBd,WAAYM,EAAoBa,EAAIE,YAAYC,QAAQC,OAAOC,QAAQ,GACvEzB,WAAYO,EAAoBa,EAAIE,YAAYI,QAAQF,OAAOC,QAAQ,GACvEvB,mBAAoB,kBAAMA,EAAmBmB,KALxCD,EAAIO,oBC1CpBC,EACD,mCADCA,EAEE,gBC8DAC,MAvDf,WAAgB,IAAD,EAC2BC,mBAAS,SADpC,mBACNlB,EADM,KACQmB,EADR,OAEyBD,mBAAS,KAFlC,mBAENlC,EAFM,KAEOoC,EAFP,OAGqBF,mBAAS,IAH9B,mBAGNnD,EAHM,KAGKsD,EAHL,OAI+BH,mBAAS,IAJxC,mBAINI,EAJM,KAIUC,EAJV,KAMbC,qBAAU,WAAM,4CACd,8BAAA9E,EAAA,sEACuBoB,EAAakD,GADpC,cACQS,EADR,gBAEgCxE,EAAmB+D,EAAoBA,GAFvE,cAEQU,EAFR,OAGEL,EAAaI,GAHf,SAKQE,EAAcX,EAAoBU,EAAgBlE,WAAWH,KALrE,4CADc,uBAAC,WAAD,wBAQduE,KACC,IAEH,IAAMC,EAAkB,uCAAG,WAAO3D,EAAOE,GAAd,SAAA1B,EAAA,6DACzByE,EAAgBjD,GADS,SAEnByD,EAAcX,EAAoB5C,GAFf,2CAAH,wDAKlBuD,EAAa,uCAAG,WAAOnF,EAAQC,GAAf,iBAAAC,EAAA,sEACFH,EAAWC,EAAQC,GADjB,OACdK,EADc,OAEdgF,EAAiBhF,EAAIM,KAAK2E,eAChCR,EAAkBO,GAHE,2CAAH,wDAWnB,OACE,sBAAKvD,UAAU,MAAf,UACI,oBAAI8B,MAAO,CAAC2B,UAAW,OAAQC,WAAY,OAAQC,WAAY,OAAQC,WAAY,aAAnF,6BACA,cAAC,EAAD,CACEpE,UAAWA,EACXO,eAAgBuD,IAGS,IAA1BP,EAAec,OACZ,KAEE,cAAC,EAAD,CACE9C,mBAjBa,SAAA+C,GACzBtF,QAAQC,IAAIqF,GACZjB,EAAeiB,IAgBHrD,YAAaA,EACbgB,aAAcA,EACdD,YAAauB,QC7CdgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9fe06069.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const getForcast = async (apiKey, value) => {\n    const url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${value}?apikey=${apiKey}&details=true`;\n    try {\n        const res = await axios.get(url);\n        return res;\n    } catch (error) {\n        console.log('get forcast failed', error);\n    }\n}","import axios from 'axios';\n\nexport const getCurrentLocation = async (apiKey, ipAdrress) => {\n    const url = `http://dataservice.accuweather.com/locations/v1/cities/ipaddress?apikey=${apiKey}&q=${ipAdrress}`;\n    try {\n        const res = await axios.get(url);\n        return {\n            locationKey: res.data.Key,\n            locationName: res.data.EnglishName,\n            parentCity: res.data.ParentCity,\n            country: res.data.Country,\n            timezone: res.data.TimeZone\n        }\n    } catch (error) {\n        console.log('get current location failed', error);\n    }\n}\n\nexport const getTopCities = async(apiKey) => {\n    const url = `http://dataservice.accuweather.com/locations/v1/topcities/150?apikey=${apiKey}`;\n    try {\n        const res = await axios.get(url);\n        const locations = [];\n        for (let location of res.data) {\n            locations.push({\n                label: location.AdministrativeArea.EnglishName,\n                value: location.Country.EnglishName,\n                code: location.Key\n            });\n        }\n        return locations;\n    } catch (error) {\n        console.log('get top cities failed', error);\n    }\n}\n","import React from 'react';\nimport Select from 'react-select';\n\nexport const CityDropdown = ({\n    locations,\n    handleOnChange\n}) => {\n    return (\n        <div className=\"search-bar\">\n            <Select\n                classNamePrefix=\"select\"\n                placeholder=\"Search a city...\"\n                isSearchable=\"true\"\n                name=\"cities\"\n                options={locations}\n                onChange={selectedOption =>\n                    handleOnChange(selectedOption.label, selectedOption.code)\n                }\n            />\n      </div>\n    )\n}\n","import React from \"react\";\nimport Moment from \"react-moment\";\n\nexport const SingleDayWeatherForcast = ({\n  selectedDay,\n  dayIndex,\n  dayDate,\n  dayIcon,\n  dayMinTemp,\n  dayMaxTemp,\n  handleDaySelection\n}) => {\n  return (\n    <div\n      className={`single-day ${selectedDay === dayIndex ? \"selected\" : \"\"}`}\n      onClick={handleDaySelection}\n    >\n      <div className=\"flex-row bd-highlight m-2 \">\n        <h6>\n          <Moment format=\"ddd\">{dayDate}</Moment>\n        </h6>\n        <img\n          className=\"small-image\"\n          src={`https://developer.accuweather.com/sites/default/files/${\n            dayIcon >= 10 ? dayIcon : \"0\" + dayIcon\n          }-s.png`}\n          alt=\"weather-icon\"\n        />\n        <h6>{`${dayMaxTemp}°C`}</h6>\n        <h6>{`${dayMinTemp}°C`}</h6>\n      </div>\n    </div>\n  );\n};","export const fahrenheitToCelcius = (fahren) => {\n    return (Number(fahren)-32)*5/9\n}","import React from \"react\";\nimport { SingleDayWeatherForcast } from \"./SingleDayWeatherForcast\";\nimport Moment from \"react-moment\";\nimport { fahrenheitToCelcius } from '../../utils'\n\nexport const WeeklyWeatherForcast = ({\n  weatherData,\n  selectedCity,\n  selectedDay,\n  handleDaySelection\n}) => {\n    return (\n        <div className=\"container gray text-white\">\n            {weatherData[0] \n                ? (\n                    <div className=\"d-flex p-2 bd-highlight justify-content-center top-weather\">\n                    <div className=\"flex-row bd-highlight\">\n                        <h4>{selectedCity}</h4>\n                        <Moment format=\"dddd\">{weatherData[selectedDay].Date}</Moment>\n\n                        <div className=\"flex-row bd-highlight\">\n                        <img\n                            src={`https://developer.accuweather.com/sites/default/files/${\n                            weatherData[selectedDay].Day.Icon >= 10\n                                ? weatherData[selectedDay].Day.Icon\n                                : \"0\" + weatherData[selectedDay].Day.Icon\n                            }-s.png`}\n                            alt=\"weather-icon\"\n                        />\n                        <p>{weatherData[selectedDay].Day.IconPhrase}</p>\n                        </div>\n                    </div>\n                    </div>\n                ) \n                : null\n            }\n\n            <div className=\"d-flex p-2 bd-highlight justify-content-center bottom-weather\" style={{marginTop: '5rem'}}>\n                {weatherData.map((day, index) => (\n                    <SingleDayWeatherForcast\n                        selectedDay={selectedDay}\n                        dayIndex={index}\n                        key={day.EpochDate}\n                        dayDate={day.Date}\n                        dayIcon={day.Day.Icon}\n                        dayMaxTemp={fahrenheitToCelcius(day.Temperature.Maximum.Value).toFixed(1)}\n                        dayMinTemp={fahrenheitToCelcius(day.Temperature.Minimum.Value).toFixed(1)}\n                        handleDaySelection={() => handleDaySelection(index)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n","export const environment = {\n    apiKey: '5uQvhf5uZZh4jvah6gmPw1sGGK3u3vIj',\n    ipAddress: '42.113.121.64'\n}","import './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport { useEffect, useState } from 'react';\nimport { getCurrentLocation, getTopCities, getForcast } from './service';\nimport { CityDropdown, WeeklyWeatherForcast } from './components';\nimport { environment } from './environment/environment.local';\n\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState('Hanoi');\n  const [selectedDay, setSelectedDay] = useState('0');\n  const [locations, setLocations] = useState([]);\n  const [weatherForcast, setWeatherForcast] = useState([]);\n\n  useEffect(() => {\n    async function fetchInitialData() {\n      const cities = await getTopCities(environment.apiKey);\n      const currentLocation = await getCurrentLocation(environment.apiKey, environment.ipAddress);\n      setLocations(cities);\n\n      await weeklyForcast(environment.apiKey, currentLocation.parentCity.Key)\n    }\n    fetchInitialData();\n  }, [])\n\n  const handleSelectChange = async (label, code) => {\n    setSelectedCity(label);\n    await weeklyForcast(environment.apiKey, code);\n  }\n\n  const weeklyForcast = async (apiKey, value) => {\n    const res = await getForcast(apiKey, value);\n    const fiveDayForcast = res.data.DailyForecasts;\n    setWeatherForcast(fiveDayForcast);\n  }\n\n  const handleDaySelection = e => {\n    console.log(e);\n    setSelectedDay(e);\n  }\n\n  return (\n    <div className=\"App\">\n        <h1 style={{textAlign: 'left', marginLeft: '2rem', paddingTop: '1rem', fontFamily: 'monospace'}}>Weather Forcast</h1>\n        <CityDropdown\n          locations={locations}\n          handleOnChange={handleSelectChange}\n        />\n\n        {weatherForcast.length === 0 \n          ? null \n          : (\n              <WeeklyWeatherForcast\n                handleDaySelection={handleDaySelection}\n                selectedDay={selectedDay}\n                selectedCity={selectedCity}\n                weatherData={weatherForcast}\n              />\n            )}\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}